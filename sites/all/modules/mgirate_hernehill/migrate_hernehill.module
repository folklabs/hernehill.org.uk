<?php

/**
 * @file
 */

function migrate_hernehill_flush_caches() {
  migrate_hernehill_register_migrations();
}

function migrate_hernehill_register_migrations() {
  $common_arguments = array(
    'source_connection' => 'd6.hernehill',
    'source_version' => 6,
    'group_name' => 'hernehill',
  );

  // Roles
  $role_arguments = $common_arguments + array(
    'machine_name' => 'role',
    'description' => t('Import Drupal 6 roles'),
    'role_mappings' => array(
      'Blogger' => 'authenticated user',
      'Campaign administrator' => 'group manager',
      'Forum Owner' => 'editor',
      'General Administrator' => 'editor',
      'News Administrator' => 'editor',
      'Group Administrator' => 'group manager',
      'Event manager' => 'contributor',
      'Services manager' => 'trader',
      'Website Administrator' => 'administrator',
      'Comment' => 'authenticated user',
      'Lido Temperature' => 'authenticated user',
      'Mapping' => 'authenticated user',
      'Unverified User (requires email confirmation)' => 'anonymous user',
    ),
  );
  Migration::registerMigration('DrupalRole6Migration',
    $role_arguments['machine_name'], $role_arguments);

  // Users
  $user_arguments = $common_arguments + array(
    'description' => t('Migration of users from Drupal 6'),
    'machine_name' => 'user',
    'role_migration' => 'role',
  );

  // We just use the migrate_d2d D6 migration class as-is.
  Migration::registerMigration('UserMigration', $user_arguments['machine_name'],
                               $user_arguments);

  $file_arguments = $common_arguments + array(
    'machine_name' => 'files',
    'description' => t('Import Drupal 6 files'),
    // 'user_migration' => 'UserMigration',
    // 'default_uid' => 1,
    'source_dir' => '/Users/pmackay/dev/herne-hill/d6.hernehillforum/sites/default/files/',
    // 'destination_dir' => 'public://',
    'file_replace' => '1'
  );
  Migration::registerMigration('DrupalFile6Migration',
              $file_arguments['machine_name'], $file_arguments);

  // For vocabulary migrations, source_vocabulary and destination_vocabulary are
  // required arguments. Note that in Drupal 6 vocabularies did not have machine
  // names, so we use the vocabulary ID to uniquely identify them.
  $vocabulary_arguments = array(
    array(
      'description' => t('Migration of Countries terms from Drupal 6'),
      'machine_name' => 'news_terms',
      'source_vocabulary' => '8',  // D6 Vocabulary ID
      'destination_vocabulary' => 'ol_tags',
      'class_name' => 'NewsTermsMigration',
    ),
    array(
      'description' => t('Migration of service tags terms from Drupal 6'),
      'machine_name' => 'service_tags_terms',
      'source_vocabulary' => '4',  // D6 Vocabulary ID
      'destination_vocabulary' => 'ol_business_tags',
      'class_name' => 'DrupalTerm6Migration',
    ),
  );

  // Again, we're using the migrate_d2d class directly.
  // The soft dependency says that while we don't have to run the user migration
  // first, we want to make sure it's listed first so the vocubularies are
  // listed right ahead of the node migrations.
  $common_vocabulary_arguments = $common_arguments + array(
    // 'class_name' => 'DrupalTerm6Migration',
    // 'soft_dependencies' => array('User'),
  );
  foreach ($vocabulary_arguments as $arguments) {
    $arguments += $common_vocabulary_arguments;
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
                                 $arguments);
  }

  $node_arguments = array(
    array(
      'class_name' => 'NewsMigration',
      'description' => t('Migration of news nodes from Drupal 6'),
      'machine_name' => 'news',
      'source_type' => 'news',
      'destination_type' => 'openlocal_news_article',
    ),
    array(
      'class_name' => 'CampaignsMigration',
      'description' => t('Migration of campaign nodes from Drupal 6'),
      'machine_name' => 'campaigns',
      'source_type' => 'campaigns',
      'destination_type' => 'ol_group',
    ),
    array(
      'class_name' => 'EventMigration',
      'description' => t('Migration of event nodes from Drupal 6'),
      'machine_name' => 'event',
      'source_type' => 'event',
      'destination_type' => 'ol_event',
    ),
    array(
      'class_name' => 'GalleryMigration',
      'description' => t('Migration of  nodes from Drupal 6'),
      'machine_name' => 'gallery',
      'source_type' => 'gallery',
      'destination_type' => 'ol_gallery',
    ),
    array(
      'class_name' => 'GroupMigration',
      'description' => t('Migration of  nodes from Drupal 6'),
      'machine_name' => 'group',
      'source_type' => 'group',
      'destination_type' => 'ol_group',
    ),
    array(
      'class_name' => 'ServiceMigration',
      'description' => t('Migration of  nodes from Drupal 6'),
      'machine_name' => 'service',
      'source_type' => 'localservice',
      'destination_type' => 'ol_business',
    ),
    array(
      'class_name' => 'GroupPostMigration',
      'description' => t('Migration of  nodes from Drupal 6'),
      'machine_name' => 'grouppost',
      'source_type' => 'grouppost',
      'destination_type' => 'ol_group_post',
    ),
  );

  $common_node_arguments = $common_arguments + array(
    // 'user_migration' => 'User',
  );

  foreach ($node_arguments as $arguments) {
    $arguments = array_merge_recursive($arguments, $common_node_arguments);
    Migration::registerMigration($arguments['class_name'], $arguments['machine_name'],
                                 $arguments);
  }
}


/*class RPForumMigration extends DrupalNode6Migration {
  public function __construct(array $arguments) {
      parent::__construct($arguments);
      // $this->dependencies[] = 'ExCategories';


      // We're replacing the legacy field_published, which was a text field, with a new date field
      // $this->addFieldMapping('field_publish_date', 'field_published');
      $this->addFieldMapping('nid', 'nid');
    // $this->addFieldMapping('uid', 'uid');
      // ->sourceMigration($this->getMigrationName('User'))->defaultValue(1);
    $this->addFieldMapping('taxonomy_forums', 'tid');
      // ->sourceMigration($this->getMigrationName('Forums'))
      // ->arguments(array('source_type' => 'tid'));
//    $this->addFieldMapping('hostname', 'poster_ip');
    // $this->addFieldMapping('status', 'status');
    // $this->addFieldMapping('title', 'title');
    // $this->addFieldMapping('body', 'post_text');
    // $this->addFieldMapping('created', 'created');
    // $this->addFieldMapping('changed', 'changed');
    // $this->addFieldMapping('language')->defaultValue($this->defaultLanguage);
    // $this->addFieldMapping('sticky', 'sticky');
    // $this->addFieldMapping('totalcount','topic_views');
      // Assigned terms are represented in Drupal 6 by their vid, migrate to the new term
      // reference field, translating the tid from the legacy value.
      // $this->addFieldMapping('field_article_category', '2')
      //      ->sourceMigration('ExCategories');
  }
}
*/


/**
* Implementation of hook_flush_caches().
*
* There needs to be some point at which your migrations are registered, or
* previously-registered migrations are updated with changed arguments. We choose to
* do this on a cache clear.
*/
// function migrate_rpforum_flush_caches() {
//   dpm('migrate_rpforum_flush_caches');
//   /**
//     * Each migration being registered takes an array of arguments, some required
//     * and some optional. Start with the common arguments required by all - the
//     * source_connection (connection key, set up in settings.php, pointing to
//     * the Drupal 6 database) and source_version (major version of Drupal).
//     */
//   $common_arguments = array(
//       'source_connection' => 'd6.hernehill',
//       'group_name' => 'RP Forum',
//       'source_version' => 6,
//   );

//   $arguments = $common_arguments + array(
//     'description' => t('Migration of article nodes from Drupal 6'),
//     'machine_name' => 'rpforum_migration',
//     'source_type' => 'rp_forum_post',
//     'destination_type' => 'forum',
//     // 'user_migration' => 'admin',  // Machine name of our user migration above
//   );

//   Migration::registerMigration('RPForumMigration', $arguments['machine_name'],
//    $arguments);
// }

// /**
//  * Implements hook_migrate_api().
//  */
// function migrate_rpforum_migrate_api() {
//   $api = array(
//     'api' => 2,
//   );
//   return $api;
// }
